import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from math import pi
from matplotlib.path import Path
from matplotlib.spines import Spine
from matplotlib.transforms import Affine2D
from matplotlib import font_manager, rc
import PERMISSIONS_RULE_kor


def draw_graph(A,B,C,D,E,F,G):
    font_name = font_manager.FontProperties(fname="C:\\Windows\\Fonts\\malgun.ttf").get_name()
    rc('font',family=font_name)
    ## 데이터 준비



    df = pd.DataFrame({
    'Character': ['악성APP 위협수치'],
    '임의동작': [A],           #A
    '개인정보 탈취': [B],       #B
    '사용정보 탈취': [C],       #C
    '단말기 정보 탈취': [D],    #D
    '위치정보': [E],            #E
    '계정정보' : [F], 
    '네트워크' : [G]          #F
    })

    labels = df.columns[1:]
    num_labels = len(labels)

    angles = [x/float(num_labels)*(2*pi) for x in range(num_labels)] ## 각 등분점
    angles += angles[:1] ## 시작점으로 다시 돌아와야하므로 시작점 추가

    my_palette = plt.cm.get_cmap("Set2", len(df.index))
    
    fig = plt.figure(figsize=(8,8))
    fig.set_facecolor('white')
    ax = fig.add_subplot(polar=True)
    for i, row in df.iterrows():
        color = my_palette(i)
        data = df.iloc[i].drop('Character').tolist()
        data += data[:1]

        ax.set_theta_offset(pi / 2) ## 시작점
        ax.set_theta_direction(-1) ## 그려지는 방향 시계방향

        plt.xticks(angles[:-1], labels, fontsize=13) ## x축 눈금 라벨
        ax.tick_params(axis='x', which='major', pad=15) ## x축과 눈금 사이에 여백을 준다.
        ax.set_rlabel_position(0) ## y축 각도 설정(degree 단위)
        plt.yticks([0,5,10,15,20,25,30],['0','5','10','15','20','25','30'], fontsize=10) ## y축 눈금 설정
        plt.ylim(0,30)

        ax.plot(angles, data, color=color, linewidth=2, linestyle='solid', label=row.Character) ## 레이더 차트 출력
        ax.fill(angles, data, color=color, alpha=0.4) ## 도형 안쪽에 색을 채워준다.

    for g in ax.yaxis.get_gridlines(): ## grid line 
        g.get_path()._interpolation_steps = len(labels)

    spine = Spine(axes=ax,spine_type='circle',path=Path.unit_regular_polygon(len(labels)))

    ## Axes의 중심과 반지름을 맞춰준다.
    spine.set_transform(Affine2D().scale(.5).translate(.5, .5)+ax.transAxes)

    ax.spines = {'polar':spine} ## frame의 모양을 원에서 폴리곤으로 바꿔줘야한다.

    plt.legend(loc=(0.9,0.9))
    plt.show()

#draw_graph()